{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using System;\
using System.Collections;\
using UnityEngine;\
\
public class Mole : MonoBehaviour\
\{\
    public static Mole Instance \{ get; private set; \}\
    public enum MoleType \{ Standard, HardHat, Bomb \};\
\
    private MoleType moleType;\
\
    [SerializeField] private Vector2 moleStartPosition = new Vector2(0f, -0.8f);\
    [SerializeField] private Vector2 moleEndPosition = Vector2.zero;\
\
    [SerializeField] private Sprite moleSprite;\
    [SerializeField] private Sprite moleHardHatSprite;\
    [SerializeField] private Sprite moleHatBrokenSprite;\
    [SerializeField] private Sprite moleHitedSprite;\
    [SerializeField] private Sprite moleHatHitedSprite;\
\
    private SpriteRenderer spriteRenderer;\
    private BoxCollider2D boxCollider2D;\
    private Animator animator;\
    private Vector2 boxColliderOffset;\
    private Vector2 boxColliderSize;\
    private Vector2 boxColliderOffsetHidden;\
    private Vector2 boxColliderSizeHidden;\
\
    private float showMoleDuration = 0.4f; // Reduced duration for faster display\
    private float showMoleFullAnimationDuration = 0.8f; // Reduced duration for faster display\
    private float hardMoleRate = 0.3f; // Increased rate of hard hat moles\
    private float bombRate = 0.05f; // Increased rate of bomb moles\
    private int moleLives;\
    private int moleIndex = 0;\
    private bool isHitable = true;\
\
    private void Awake()\
    \{\
        Instance = this;\
        spriteRenderer = GetComponent<SpriteRenderer>();\
        animator = GetComponent<Animator>();\
        boxCollider2D = GetComponent<BoxCollider2D>();\
        boxColliderOffset = boxCollider2D.offset;\
        boxColliderSize = boxCollider2D.size;\
        boxColliderOffsetHidden = new Vector2(boxColliderOffset.x, -moleStartPosition.y / 2f);\
        boxColliderSizeHidden = new Vector2(boxColliderSize.x, 0f);\
    \}\
\
    public void Activate(int level)\
    \{\
        SetLevel(level);\
        CreateNext();\
        StartCoroutine(ShowHide(moleStartPosition, moleEndPosition));\
    \}\
\
    private void OnMouseDown()\
    \{\
        if (isHitable)\
        \{\
            switch (moleType)\
            \{\
                case MoleType.Standard:\
                    spriteRenderer.sprite = moleHitedSprite;\
                    GameManager.Instance.MoleHited(moleIndex);\
                    StopAllCoroutines();\
                    StartCoroutine(QuickHide());\
                    isHitable = false;\
                    break;\
                case MoleType.HardHat:\
                    if (moleLives == 2)\
                    \{\
                        spriteRenderer.sprite = moleHatBrokenSprite;\
                        moleLives--;\
                    \}\
                    else\
                    \{\
                        spriteRenderer.sprite = moleHatHitedSprite;\
                        GameManager.Instance.MoleHited(moleIndex);\
                        StopAllCoroutines();\
                        StartCoroutine(QuickHide());\
                        isHitable = false;\
                    \}\
                    break;\
                case MoleType.Bomb:\
                    StopGame();\
                    GameManager.Instance.GameOver();\
                    break;\
                default:\
                    break;\
            \}\
        \}\
    \}\
\
    private IEnumerator ShowHide(Vector2 moleStartingPosition, Vector2 moleEndingPosition)\
    \{\
        transform.localPosition = moleStartingPosition;\
\
        float elapsed = 0f;\
        while (elapsed < showMoleDuration)\
        \{\
            transform.localPosition = Vector2.Lerp(moleStartingPosition, moleEndingPosition, elapsed / showMoleDuration);\
            boxCollider2D.offset = Vector2.Lerp(boxColliderOffsetHidden, boxColliderOffset, elapsed / showMoleDuration);\
            boxCollider2D.size = Vector2.Lerp(boxColliderSizeHidden, boxColliderSize, elapsed / showMoleDuration);\
            elapsed += Time.deltaTime;\
            yield return null;\
        \}\
\
        transform.localPosition = moleEndingPosition;\
        boxCollider2D.offset = boxColliderOffset;\
        boxCollider2D.size = boxColliderSize;\
\
        yield return new WaitForSeconds(showMoleFullAnimationDuration);\
\
        elapsed = 0f;\
        while (elapsed < showMoleDuration)\
        \{\
            transform.localPosition = Vector2.Lerp(moleEndingPosition, moleStartingPosition, elapsed / showMoleDuration);\
            boxCollider2D.offset = Vector2.Lerp(boxColliderOffset, boxColliderOffsetHidden, elapsed / showMoleDuration);\
            boxCollider2D.size = Vector2.Lerp(boxColliderSize, boxColliderSizeHidden, elapsed / showMoleDuration);\
            elapsed += Time.deltaTime;\
            yield return null;\
        \}\
\
        transform.localPosition = moleStartingPosition;\
        boxCollider2D.offset = boxColliderOffsetHidden;\
        boxCollider2D.size = boxColliderSizeHidden;\
\
        if (isHitable)\
        \{\
            isHitable = false;\
            if (moleType != MoleType.Bomb)\
            \{\
                GameManager.Instance.MoleMissed(moleIndex, moleType != MoleType.Bomb);\
            \}\
        \}\
    \}\
\
    private IEnumerator QuickHide()\
    \{\
        yield return new WaitForSeconds(0.25f);\
\
        if (!isHitable)\
        \{\
            Hide();\
        \}\
    \}\
\
    public void Hide()\
    \{\
        transform.localPosition = moleStartPosition;\
        boxCollider2D.offset = boxColliderOffsetHidden;\
        boxCollider2D.size = boxColliderSizeHidden;\
    \}\
\
    private void CreateNext()\
    \{\
        float random = UnityEngine.Random.Range(0f, 1f);\
        if (random < bombRate)\
        \{\
            moleType = MoleType.Bomb;\
            animator.enabled = true;\
        \}\
        else\
        \{\
            animator.enabled = false;\
            random = UnityEngine.Random.Range(0f, 1f);\
            if (random < hardMoleRate)\
            \{\
                moleType = MoleType.HardHat;\
                spriteRenderer.sprite = moleHardHatSprite;\
                moleLives = 2;\
            \}\
            else\
            \{\
                moleType = MoleType.Standard;\
                spriteRenderer.sprite = moleSprite;\
                moleLives = 1;\
            \}\
        \}\
        isHitable = true;\
    \}\
\
    private void SetLevel(int level)\
    \{\
        float durationMin = Mathf.Clamp(1 - level * 0.1f, 0.2f, 0.8f); // Faster display time\
        float durationMax = Mathf.Clamp(2 - level * 0.1f, 0.5f, 1.5f); // Faster display time\
\
        showMoleFullAnimationDuration = UnityEngine.Random.Range(durationMin, durationMax);\
\
        bombRate = Mathf.Min(level * 0.02f, 0.15f); // Increased bomb rate\
        hardMoleRate = Mathf.Min(level * 0.015f, 0.6f); // Increased hard mole rate\
    \}\
\
    public void SetIndex(int index)\
    \{\
        moleIndex = index;\
    \}\
\
    public void StopGame()\
    \{\
        isHitable = false;\
        StopAllCoroutines();\
    \}\
\}\
\
\
\
\
\
\
\
using System;\
using System.Collections.Generic;\
using TMPro;\
using UnityEngine;\
using UnityEngine.UI;\
\
public class GameManager : MonoBehaviour\
\{\
    public static GameManager Instance \{ get; private set; \}\
\
    public event EventHandler OnStateChanged;\
    public event EventHandler OnGamePaused;\
    public event EventHandler OnGameUnpaused;\
\
    private enum State \{ WaitingToStart, GamePlaying, GameOver \}\
\
    private State state;\
    private HashSet<Mole> currentMoles = new HashSet<Mole>();\
\
    private const string HIGH_SCORE_KEY = "HighScore";\
\
    private bool isGamePaused = false;\
    private float waitingToStartTimer = 1f;\
    private float gamePlayingHighTimer;\
    private float gamePlayingTimer = 0f;\
    private bool isNewBest = false;\
    private float gamePlayingTimerMax = 200f;\
    private float nextMoleSpawnTime;\
\
    [SerializeField] private List<Mole> moles;\
    [SerializeField] private TMPro.TextMeshProUGUI molesPerSecondText;\
    [SerializeField] private TextMeshProUGUI bestMolesPerSecondText;\
    [SerializeField] private Button resumeButton;\
    [SerializeField] private float timeBetweenMoleSpawns = 1f; // Reduced time between mole spawns\
\
    private void Awake()\
    \{\
        Instance = this;\
        state = State.WaitingToStart;\
        resumeButton.onClick.AddListener(() =>\
        \{\
            TogglePauseGame();\
        \});\
    \}\
\
    private void Start()\
    \{\
        FindAllMoleInScene();\
        nextMoleSpawnTime = Time.time + timeBetweenMoleSpawns;\
        HideAndClearMoles();\
        LoadHighScore();\
    \}\
\
    void Update()\
    \{\
        switch (state)\
        \{\
            case State.WaitingToStart:\
                waitingToStartTimer -= Time.deltaTime;\
                if (waitingToStartTimer < 0f)\
                \{\
                    state = State.GamePlaying;\
                    OnStateChanged?.Invoke(this, EventArgs.Empty);\
                \}\
                break;\
            case State.GamePlaying:\
                gamePlayingTimer += Time.deltaTime;\
\
                molesPerSecondText.text = gamePlayingTimer.ToString("F3");\
                bestMolesPerSecondText.text = GetGamePlayingHighTimer().ToString("F3");\
\
                if (Time.time >= nextMoleSpawnTime)\
                \{\
                    int index = UnityEngine.Random.Range(0, moles.Count);\
                    if (!currentMoles.Contains(moles[index]))\
                    \{\
                        currentMoles.Add(moles[index]);\
                        moles[index].Activate(1);\
                        nextMoleSpawnTime = Time.time + timeBetweenMoleSpawns;\
                    \}\
                \}\
                break;\
            case State.GameOver:\
                break;\
        \}\
    \}\
\
    private void FindAllMoleInScene()\
    \{\
        Mole[] foundMoles = FindObjectsOfType<Mole>();\
        moles.AddRange(foundMoles);\
    \}\
\
    private void HideAndClearMoles()\
    \{\
        for (int i = 0; i < moles.Count; i++)\
        \{\
            moles[i].Hide();\
            moles[i].SetIndex(i);\
        \}\
        currentMoles.Clear();\
    \}\
\
    private void LoadHighScore()\
    \{\
        if (PlayerPrefs.HasKey(HIGH_SCORE_KEY))\
        \{\
            gamePlayingHighTimer = PlayerPrefs.GetFloat(HIGH_SCORE_KEY);\
        \}\
        else\
        \{\
            gamePlayingHighTimer = 0f;\
        \}\
    \}\
\
    private void SaveHighScore()\
    \{\
        PlayerPrefs.SetFloat(HIGH_SCORE_KEY, gamePlayingHighTimer);\
        PlayerPrefs.Save();\
    \}\
\
    public bool IsGamePlaying()\
    \{\
        return state == State.GamePlaying;\
    \}\
\
    public bool IsGameOver()\
    \{\
        return state == State.GameOver;\
    \}\
\
    public float GetGamePlayinTimerNormalized()\
    \{\
        return 1 - (gamePlayingTimer / gamePlayingTimerMax);\
    \}\
\
    public void TogglePauseGame()\
    \{\
        isGamePaused = !isGamePaused;\
        if (isGamePaused)\
        \{\
            Time.timeScale = 0f;\
            OnGamePaused?.Invoke(this, EventArgs.Empty);\
        \}\
        else\
        \{\
            Time.timeScale = 1f;\
            OnGameUnpaused?.Invoke(this, EventArgs.Empty);\
        \}\
    \}\
\
    public void GameOver()\
    \{\
        if (gamePlayingTimer > gamePlayingHighTimer)\
        \{\
            gamePlayingHighTimer = gamePlayingTimer;\
            SaveHighScore();\
            isNewBest = true;\
        \}\
        foreach (Mole mole in moles)\
        \{\
            mole.StopGame();\
        \}\
        state = State.GameOver;\
        OnStateChanged?.Invoke(this, EventArgs.Empty);\
    \}\
\
    public float GetMolesPerSecond()\
    \{\
        return gamePlayingTimer;\
    \}\
\
    public float GetGamePlayingHighTimer()\
    \{\
        if (PlayerPrefs.HasKey(HIGH_SCORE_KEY))\
        \{\
            gamePlayingHighTimer = PlayerPrefs.GetFloat(HIGH_SCORE_KEY);\
        \}\
        else\
        \{\
            gamePlayingHighTimer = 0f;\
        \}\
        return gamePlayingHighTimer;\
    \}\
\
    public bool GetIsNewBest()\
    \{\
        return isNewBest;\
    \}\
\
    public void MoleMissed(int moleIndex, bool isMole)\
    \{\
        currentMoles.Remove(moles[moleIndex]);\
\
        if (isMole)\
        \{\
            GameOver();\
        \}\
    \}\
\
    public void MoleHited(int moleIndex)\
    \{\
        currentMoles.Remove(moles[moleIndex]);\
    \}\
\}\
}